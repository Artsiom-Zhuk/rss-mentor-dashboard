{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","selectedMenors","JSON","parse","localStorage","getItem","data","mentors","handleChange","_this","setState","setItem","stringify","getClassName","_this2","this","fetch","process","then","res","json","map","mentor","label","fullName","github","students","catch","alert","_this3","_this$state","student","react_default","a","createElement","className","key","stateTasks","tasks","task","index","name","style","fontSize","react_select_esm","value","onChange","options","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRA2HeA,6MArHbC,MAAQ,CACNC,eAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,mBAChDC,KAAM,GACNC,QAAS,MAqBXC,aAAe,SAACP,GACdQ,EAAKC,SAAS,CAAET,mBAChBG,aAAaO,QAAQ,iBAAkBT,KAAKU,UAAUX,OAGxDY,aAAe,SAACb,GACd,OAAQA,GACN,IAAK,UACH,MAAO,aAGT,IAAK,UACH,MAAO,WAGT,IAAK,OACH,MAAO,YAGT,IAAK,cACH,MAAO,cAGT,IAAK,WACH,MAAO,iGA1CO,IAAAc,EAAAC,KAClBC,MAAMC,mCACHC,KAAK,SAACC,GACL,OAAOA,EAAIC,SAEZF,KAAK,SAACZ,GACL,IAAMC,EAAUD,EAAKe,IAAI,SAAAC,GACvB,MAAQ,CACNC,MAAOD,EAAOE,SACdC,OAAQH,EAAOG,OACfC,SAAUJ,EAAOI,YAGrBZ,EAAKJ,SAAS,CAAEJ,OAAMC,cAEvBoB,MAAMC,wCAgCF,IAAAC,EAAAd,KAAAe,EAC6Bf,KAAKf,MAAjCC,EADD6B,EACC7B,eAAgBM,EADjBuB,EACiBvB,QAElBmB,EAAWzB,GAAkBA,EAAeyB,SAASL,IAAI,SAAAU,GAC7D,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBC,IAAKL,EAAQN,QAASM,EAAQN,UAInEY,EAAapC,GAAkBA,EAAeyB,SAASL,IAAI,SAAAU,GAC/D,OACEC,EAAAC,EAAAC,cAAA,MAAIE,IAAKL,EAAQN,QACdM,EAAQO,MAAMjB,IAAI,SAACkB,EAAMC,GACxB,OAAOR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoBC,IAAKI,GAC5CR,EAAAC,EAAAC,cAAA,MAAIC,UAAWN,EAAKhB,aAAa0B,EAAKvC,QAASuC,EAAKvC,aAOxDsC,EAAQrC,GAAkBA,EAAeyB,SAAS,GAAGY,MAAMjB,IAAI,SAACkB,EAAMC,GAC1E,OACER,EAAAC,EAAAC,cAAA,MAAIE,IAAKI,GACPR,EAAAC,EAAAC,cAAA,UAAKK,EAAKE,SAKhB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAEC,SAAU,KAAxB,UAGAX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQT,UAAU,cAChBU,MAAO5C,EACP6C,SAAU/B,KAAKP,aACfuC,QAASxC,MAKdN,GACC+B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,WACCR,IAGLM,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACGI,EACAD,aA7GCW,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.8b8ea938.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Select from 'react-select';\n\n\nclass App extends React.Component {\n  state = {\n    selectedMenors: JSON.parse(localStorage.getItem('selectedMentor')),\n    data: [],\n    mentors: []\n  }\n\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/data.json')\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        const mentors = data.map(mentor => {\n          return ({\n            label: mentor.fullName,\n            github: mentor.github,\n            students: mentor.students\n          })\n        })\n        this.setState({ data, mentors });\n      })\n      .catch(alert);\n  };\n\n  handleChange = (selectedMenors) => {\n    this.setState({ selectedMenors });\n    localStorage.setItem('selectedMentor', JSON.stringify(selectedMenors));\n  }\n\n  getClassName = (state) => {\n    switch (state) {\n      case 'Checked': {\n        return 'greenColor'\n      }\n\n      case 'notDone': {\n        return 'redColor'\n      }\n\n      case 'ToDo': {\n        return 'grayColor'\n      }\n\n      case 'In Progress': {\n        return 'yellowColor'\n      }\n\n      case 'Checking': {\n        return 'pinkColor'\n      }\n    }\n  }\n\n  render() {\n    const { selectedMenors, mentors } = this.state;\n\n    const students = selectedMenors && selectedMenors.students.map(student => {\n      return (\n        <td className='app__td-student-github' key={student.github}>{student.github}</td>\n      )\n    })\n\n    const stateTasks = selectedMenors && selectedMenors.students.map(student => {\n      return (\n        <td key={student.github}>\n          {student.tasks.map((task, index )=> {\n            return <tr className='app_tr-task-state' key={index}>\n              <td className={this.getClassName(task.state)}>{task.state}</td>\n            </tr>\n          })}\n        </td>\n      )\n    })\n\n    const tasks = selectedMenors && selectedMenors.students[0].tasks.map((task, index) => {\n      return (\n        <tr key={index}>\n          <td>{task.name}</td>\n        </tr>\n      )\n    })\n\n    return (\n      <div>\n        <div className='app__div-select-mentor'>\n          <div style={{ fontSize: 20 }}>\n            Mentor\n          </div>\n          <div>\n            <Select className=\"app__select\"\n              value={selectedMenors}\n              onChange={this.handleChange}\n              options={mentors}\n            />\n          </div>\n        </div>\n\n        {selectedMenors && (\n          <table className='app__table'>\n            <thead >\n              <tr >\n                <td></td>\n                {students}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {tasks}\n                {stateTasks}\n              </tr>\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}